{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\OneDrive\\\\Desktop\\\\Cabinent\\\\Content\\\\Code\\\\Github\\\\CAP Full Stack\\\\Final Project\\\\client\\\\src\\\\pages\\\\ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = () => {\n  _s();\n\n  const [characters, setCharacters] = useState([]);\n  useEffect(() => {\n    const fetchCharacters = async () => {\n      let {\n        data: characters,\n        error\n      } = await supabase.from('Characters') // You might want to change 'Characters' to your relevant table name\n      .select('*');\n\n      if (error) {\n        console.error('Error fetching characters:', error);\n      } else {\n        setCharacters(characters);\n      }\n    };\n\n    fetchCharacters();\n  }, []); // Helper function to format the date\n\n  const formatDate = dateString => {\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: characters.length > 0 ? characters.map(character => /*#__PURE__*/_jsxDEV(Card, {\n      id: character.id,\n      title: character.name,\n      author: character.type // If you've updated this field to 'type' in your database and code\n      ,\n      description: character.description,\n      created: formatDate(character.created_at) // Format the date to be reader-friendly\n\n    }, character.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No Characters Found \\uD83D\\uDE1E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"Lpb9AbqKJ07+xuj4aZ1twNw87e0=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","ReadPosts","characters","setCharacters","fetchCharacters","data","error","from","select","console","formatDate","dateString","options","year","month","day","hour","minute","second","Date","toLocaleDateString","undefined","length","map","character","id","name","type","description","created_at"],"sources":["C:/Users/aaron/OneDrive/Desktop/Cabinent/Content/Code/Github/CAP Full Stack/Final Project/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\n\nconst ReadPosts = () => {\n    const [characters, setCharacters] = useState([]);\n\n    useEffect(() => {\n        const fetchCharacters = async () => {\n            let { data: characters, error } = await supabase\n                .from('Characters') // You might want to change 'Characters' to your relevant table name\n                .select('*');\n\n            if (error) {\n                console.error('Error fetching characters:', error);\n            } else {\n                setCharacters(characters);\n            }\n        };\n\n        fetchCharacters();\n    }, []);\n\n    // Helper function to format the date\n    const formatDate = (dateString) => {\n        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };\n        return new Date(dateString).toLocaleDateString(undefined, options);\n    };\n\n    return (\n        <div className=\"ReadPosts\">\n            {\n                characters.length > 0 ?\n                characters.map(character => (\n                    <Card \n                        key={character.id}\n                        id={character.id}\n                        title={character.name}\n                        author={character.type} // If you've updated this field to 'type' in your database and code\n                        description={character.description}\n                        created={formatDate(character.created_at)} // Format the date to be reader-friendly\n                    />\n                )) : <h2>No Characters Found ðŸ˜ž</h2>\n            }\n        </div>  \n    );\n}\n\nexport default ReadPosts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,QAAT,QAAyB,WAAzB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;EAEAC,SAAS,CAAC,MAAM;IACZ,MAAMM,eAAe,GAAG,YAAY;MAChC,IAAI;QAAEC,IAAI,EAAEH,UAAR;QAAoBI;MAApB,IAA8B,MAAMN,QAAQ,CAC3CO,IADmC,CAC9B,YAD8B,EAChB;MADgB,CAEnCC,MAFmC,CAE5B,GAF4B,CAAxC;;MAIA,IAAIF,KAAJ,EAAW;QACPG,OAAO,CAACH,KAAR,CAAc,4BAAd,EAA4CA,KAA5C;MACH,CAFD,MAEO;QACHH,aAAa,CAACD,UAAD,CAAb;MACH;IACJ,CAVD;;IAYAE,eAAe;EAClB,CAdQ,EAcN,EAdM,CAAT,CAHoB,CAmBpB;;EACA,MAAMM,UAAU,GAAIC,UAAD,IAAgB;IAC/B,MAAMC,OAAO,GAAG;MAAEC,IAAI,EAAE,SAAR;MAAmBC,KAAK,EAAE,MAA1B;MAAkCC,GAAG,EAAE,SAAvC;MAAkDC,IAAI,EAAE,SAAxD;MAAmEC,MAAM,EAAE,SAA3E;MAAsFC,MAAM,EAAE;IAA9F,CAAhB;IACA,OAAO,IAAIC,IAAJ,CAASR,UAAT,EAAqBS,kBAArB,CAAwCC,SAAxC,EAAmDT,OAAnD,CAAP;EACH,CAHD;;EAKA,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,UAEQV,UAAU,CAACoB,MAAX,GAAoB,CAApB,GACApB,UAAU,CAACqB,GAAX,CAAeC,SAAS,iBACpB,QAAC,IAAD;MAEI,EAAE,EAAEA,SAAS,CAACC,EAFlB;MAGI,KAAK,EAAED,SAAS,CAACE,IAHrB;MAII,MAAM,EAAEF,SAAS,CAACG,IAJtB,CAI4B;MAJ5B;MAKI,WAAW,EAAEH,SAAS,CAACI,WAL3B;MAMI,OAAO,EAAElB,UAAU,CAACc,SAAS,CAACK,UAAX,CANvB,CAM+C;;IAN/C,GACSL,SAAS,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADJ,CADA,gBAUK;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAZb;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH,CA1CD;;GAAMxB,S;;KAAAA,S;AA4CN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}